apply plugin: 'com.android.application'
apply from: 'jacoco.gradle'

// Load Jacoco Only if needed
if (jacocoEnabled.toBoolean()) {
    project.logger.lifecycle('Applying jacoco build file: jacoco.gradle')
    apply from: rootProject.file("jacoco.gradle")
}

// General switch for tests types this control report generation but not yet unit test selection - TODO Make this a flag
def carvedTests = project.hasProperty('carvedTests')// ? project.getProperty('carvedTests') : false //Default value false

def carvedTestSrcDir = "src/allCarvedTest"
def testReportPrefix = "${buildDir}/carvedTest/testExecution"
def coverageReportPrefix = "${buildDir}/carvedTest/coverage"

if (carvedTests) {
    if (project.hasProperty('testName')) {
        def testName = project.getProperty('testName')
        println ""
        println "* Processing Carved Test ${testName}"
        println ""

        carvedTestSrcDir = "src/carvedTest/${testName}"

        testReportPrefix = "${buildDir}/carvedTest/${testName}/testExecution"
        coverageReportPrefix = "${buildDir}/carvedTest/${testName}/coverage"
    }
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    ndkVersion '22.0.7026061'

    // Change the src folder for carved tests
    sourceSets {
        test {
            if (carvedTests) {
                java.srcDirs = ["$carvedTestSrcDir"]
            }
        }
    }

	defaultConfig {
		applicationId 'org.openobservatory.ooniprobe'
		minSdkVersion 23
		targetSdkVersion 30
		versionName '3.2.0'
		versionCode 79
		testInstrumentationRunner "org.openobservatory.ooniprobe.TestAndroidJUnitRunner"
		buildConfigField 'String', 'OONI_API_BASE_URL', '"https://api.ooni.io/"'
		buildConfigField 'String', 'NOTIFICATION_SERVER', '"https://countly.ooni.io"'
		resValue "string", "APP_NAME", "OONI Probe"
		buildConfigField 'String', 'SOFTWARE_NAME', 'BASE_SOFTWARE_NAME+IS_DEBUG'
		buildConfigField 'String', 'COUNTLY_KEY', '"146836f41172f9e3287cab6f2cc347de3f5ddf3b"'
		buildConfigField "boolean", "RUN_AUTOMATION", "false"
	}

    buildTypes {
        debug {
            testCoverageEnabled jacocoEnabled.toBoolean()
            buildConfigField 'String', 'IS_DEBUG', '"-debug"'
            buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'IS_DEBUG', '""'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        animationsDisabled true

        unitTests.all {

            jvmArgs "-Xmx2g"

            // Nices output on the console/logs
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }

            test {
                //Get last path of default set path.
                def junitXmlTestTaskName = file("$reports.junitXml.destination").name
                def htmlTestTaskName = file("$reports.html.destination").name

                if (carvedTests) {
                    // Just use the same?
                    reports.junitXml.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                    reports.html.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                }

                filter {
                    //specific test method
                    if (project.hasProperty('carvedTestsFilter')){
                        includeTestsMatching project.carvedTestsFilter
                    }
                }
            }
        }
    }

    // Shared test code between Unit and Instrumented tests
    sourceSets {
        androidTest {
            java.srcDirs += "src/sharedTest/java"
            resources.srcDirs += "src/sharedTest/resources"
        }
        test {
            java.srcDirs += "src/sharedTest/java"
            resources.srcDirs += "src/sharedTest/resources"
        }
    }

    flavorDimensions 'testing', 'license'
    productFlavors {
        stable {
            dimension 'testing'
            buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android"'
        }
        dev {
            dimension 'testing'
            applicationIdSuffix '.dev'
            versionName versionNameDate()
            versionCode versionCodeDate()
            buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android-dev"'
            resValue "string", "APP_NAME", "OONI Dev"
            buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
        }
        experimental {
            dimension 'testing'
            applicationIdSuffix '.experimental'
            versionName versionNameDate()
            versionCode versionCodeDate()
            buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android-experimental"'
            resValue "string", "APP_NAME", "OONI Exp"
            buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
        }
        fdroid {
            dimension 'license'
        }
        full {
            dimension 'license'
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("fdroid") && (names.contains("experimental") || names.contains("dev"))) {
            setIgnore(true)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation project(path: ':engine')

// AndroidX
	implementation 'androidx.appcompat:appcompat:1.2.0'
	implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
	implementation 'androidx.lifecycle:lifecycle-process:2.3.1'
	implementation 'androidx.preference:preference:1.1.1'
	implementation 'com.google.android.material:material:1.3.0'
	implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
	implementation 'com.google.guava:guava:30.1.1-android'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

// Third-party
	annotationProcessor 'com.github.Raizlabs.DBFlow:dbflow-processor:4.2.4'
	implementation 'com.github.Raizlabs.DBFlow:dbflow-core:4.2.4'
	implementation 'com.github.Raizlabs.DBFlow:dbflow:4.2.4'

	implementation 'com.squareup.retrofit2:retrofit:2.9.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
	implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'


	implementation 'com.jakewharton:butterknife:10.2.3'
	annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'

	implementation 'com.github.xanscale.LocalhostToolkit:app:19.05.01'
	implementation 'com.airbnb.android:lottie:3.0.7'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'ru.noties:markwon:2.0.1'
	implementation 'commons-io:commons-io:2.6'
	//arcview to fragment_dashboard
	implementation 'com.github.florent37:shapeofview:1.3.2'

// Flavor
	fullImplementation platform('com.google.firebase:firebase-bom:26.3.0')
	fullImplementation 'com.google.firebase:firebase-messaging'
	fullImplementation 'ly.count.android:sdk:20.11.1'
	fullImplementation 'io.sentry:sentry-android:4.0.0'

// Dependency Injection
    implementation 'com.google.dagger:dagger:2.36'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.36'

// Testing
	// Unit Testing
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'androidx.test:core:1.3.0'
	testImplementation 'androidx.test:runner:1.3.0'
	testImplementation 'androidx.test:rules:1.3.0'
	testImplementation 'org.mockito:mockito-core:3.10.0'
	testImplementation 'org.mockito:mockito-inline:3.10.0'
	testImplementation 'org.robolectric:robolectric:4.5.1'
	testImplementation 'com.github.blocoio:faker:1.2.8'
	testImplementation 'org.ooni:oonimkall:2021.05.13-070256'
	testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.35.1'

    testImplementation 'org.robolectric:robolectric:4.2'
    testImplementation 'androidx.test:core:1.3.0'
	// Instrumentation Testing
	androidTestImplementation 'tools.fastlane:screengrab:2.0.0'
	androidTestImplementation 'com.github.blocoio:faker:1.2.8'
	androidTestImplementation 'androidx.test:runner:1.3.0'
	androidTestImplementation 'androidx.test:rules:1.3.0'
	androidTestImplementation 'androidx.test.ext:junit:1.1.2'
	androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
	androidTestImplementation('androidx.test.espresso:espresso-contrib:3.3.0') {
		exclude group: 'com.android.support', module: 'appcompat'
		exclude group: 'com.android.support', module: 'support-v4'
		exclude module: 'recyclerview-v7'
	}
	androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0') {
		exclude group: 'com.android.support', module: 'appcompat'
		exclude group: 'com.android.support', module: 'support-v4'
		exclude module: 'recyclerview-v7'
	}
	androidTestImplementation('com.schibsted.spain:barista:3.9.0')
	androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:2.35.1"
}

static def versionCodeDate() {
    return new Date().format("yyyyMMdd").toInteger()
}

static def versionNameDate() {
    return new Date().format("yyyy.MM.dd-HH")
}


